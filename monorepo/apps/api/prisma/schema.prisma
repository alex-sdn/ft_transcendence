// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Statuses {
	online
	offline
	ingame
}

enum GameType {
	ranked
	casual
}

enum ChatAccess {
	public
	private
	protected
}

model User {
	id			Int @id @default(autoincrement())
	login42		String @unique
	nickname	String @unique
	avatar		Bytes @default("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")

	createdAt	DateTime @default(now())
	//upatedAt	DateTime @updatedAt

	has2fa		Boolean @default(false)
	secret2fa	String?

	// status		Statuses  ???

	win			Int @default(0)
	loss		Int @default(0)
	LP			Int @default(100)

	// friendsId	Int[]
	// friends		User[] @relation("Friends", references: [id])
	// blocks		User[]

	matches		Match[]

	channels	Channel[]
	admin		Admin?
	banned		Banned?	
}

model Match {
	id			Int @id @default(autoincrement())
	date		DateTime @default(now())

	players		User[]

	// p1LP		Int    need ?
	// p2LP		Int

	p1score		Int
	p2score		Int

	type		GameType
}

model Channel {
	id			Int @id @default(autoincrement())
	name		String @unique

	access		ChatAccess
	password	String?

	members		User[]
	admins		Admin[]
	bans		Banned[]
	// bans		User[]
	
	// invites ???
}

model Admin {
	id			Int @id @default(autoincrement())
	userId		Int @unique

	user		User @relation(fields: [userId], references: [id])
	channel		Channel[]
}

model Banned {
	id			Int @id @default(autoincrement())
	userId		Int @unique

	user		User @relation(fields: [userId], references: [id])
	channel		Channel[]
}

// model Member {}
