// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "debian-openssl-1.1.x"]
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Statuses {
	online
	offline
	ingame
}

enum GameType {
	ranked
	casual
}

enum ChatAccess {
	public
	private
	protected
}

model User {
	id			Int @id @default(autoincrement())
	login42		String @unique
	nickname	String @unique
	avatar		String @default("default-avatar")

	createdAt	DateTime @default(now())
	//upatedAt	DateTime @updatedAt

	has2fa		Boolean @default(false)
	secret2fa	String?

	// status		Statuses  ???

	win			Int @default(0)
	loss		Int @default(0)
	LP			Int @default(100)

	friends1	Friendship[] @relation("UserFriends1")
	friends2	Friendship[] @relation("UserFriends2")

	blocked		Blocked[] @relation("Blocker")
	blockedBy	Blocked[] @relation("Blocked")

	matchesP1	Match[] @relation("UserMatchesP1")
	matchesP2	Match[] @relation("UserMatchesP2")

	channels	Channel[]
	// admin		Admin?
	// banned		Banned?	
}

model Match {
	id			Int @id @default(autoincrement())
	date		DateTime @default(now())

	user1     	User @relation("UserMatchesP1", fields: [user1Id], references: [id])
	user1Id   	Int
	user1nick	String

	user2     	User @relation("UserMatchesP2", fields: [user2Id], references: [id])
	user2Id   	Int
	user2nick	String

	p1LP		Int  //at start of game ? save gain/loss ?
	p2LP		Int

	p1score		Int
	p2score		Int

	type		GameType
}

model Channel {
	id			Int @id @default(autoincrement())
	name		String @unique

	access		ChatAccess
	password	String?

	// owner		User
	members		User[]
	// admins		Admin[]
	// bans		Banned[]

	owner		Int?
	admins		Int[]
	bans		Int[]
	mutes		Int[]  //doit etre table separee pour garder temps
	
	// invites ???
}

// model Admin {
// 	id			Int @id @default(autoincrement())
// 	userId		Int @unique

// 	user		User @relation(fields: [userId], references: [id])
// 	channel		Channel[]
// }

// model Banned {
// 	id			Int @id @default(autoincrement())
// 	userId		Int @unique

// 	user		User @relation(fields: [userId], references: [id])
// 	channel		Channel[]
// }

// model Member {}

model Friendship {
	id			Int @id @default(autoincrement())
	
	user1		User @relation("UserFriends1", fields: [user1Id], references: [id])
	user1Id		Int
	
	user2		User @relation("UserFriends2", fields: [user2Id], references: [id])
	user2Id		Int

	@@unique([user1Id, user2Id])
}

model Blocked {
	id        	Int      @id @default(autoincrement())

	blocker   	User     @relation("Blocker", fields: [blockerId], references: [id])
	blockerId 	Int

	blocked   	User     @relation("Blocked", fields: [blockedId], references: [id])
	blockedId 	Int

	@@unique([blockerId, blockedId])
}
