// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Statuses {
	online
	offline
	ingame
}

enum GameType {
	ranked
	casual
}

enum ChatAccess {
	public
	private
	protected
}

model User {
	id			Int @id @default(autoincrement())
	login42		String @unique
	nickname	String @unique
	avatar		String @default("2b0cbcccb65ab6401707972d3ca91db7")

	createdAt	DateTime @default(now())
	//upatedAt	DateTime @updatedAt

	has2fa		Boolean @default(false)
	secret2fa	String?

	// status		Statuses  ???

	win			Int @default(0)
	loss		Int @default(0)
	LP			Int @default(100)

	// friendsId	Int[]
	// friends		User[] @relation("Friends", references: [id])
	// blocks		User[]

	matches		Match[]

	channels	Channel[]
	admin		Admin?
	banned		Banned?	
}

model Match {
	id			Int @id @default(autoincrement())
	date		DateTime @default(now())

	players		User[]

	p1LP		Int  //at start of game ? save gain/loss ?
	p2LP		Int

	p1score		Int
	p2score		Int

	type		GameType
}

model Channel {
	id			Int @id @default(autoincrement())
	name		String @unique

	access		ChatAccess
	password	String?

	// owner		User
	members		User[]
	admins		Admin[]
	bans		Banned[]
	
	// invites ???
}

model Admin {
	id			Int @id @default(autoincrement())
	userId		Int @unique

	user		User @relation(fields: [userId], references: [id])
	channel		Channel[]
}

model Banned {
	id			Int @id @default(autoincrement())
	userId		Int @unique

	user		User @relation(fields: [userId], references: [id])
	channel		Channel[]
}

// model Member {}
